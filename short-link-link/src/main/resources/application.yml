server:
  port: 8002

#应用名称
spring:
  application:
    name: short-link-link

  #服务注册发现
  cloud:
    nacos:
      discovery:
        server-addr: localhost:8848
        username: nacos
        password: nacos

  # redis配置
  redis:
    database: 0
    host: localhost
    port: 16379
    timeout: 5000
    connect-timeout: 5000
    password: ${password}
    # redis连接池配置
    lettuce:
      pool:
        max-active: 200 # 连接池最大连接数
        max-idle: 10 # 连接池中的最大空闲连接
        min-idle: 2 # 连接池中的最小空闲连接
        max-wait: 10000 # 连接池最大阻塞等待时间（使用负值表示没有限制）

  # 数据源
  shardingsphere:
    datasource:
      # 三个库， ds0,ds1都有两个短链组、短链表。dsa只有短链表
      names: ds0,ds1,dsa
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:13306/short_link_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: ${password}
        maximum-pool-size: 50
        minimum-idle: 50
        max-lifetime: 1800000
        idle-timeout: 30000
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:13306/short_link_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: ${password}
        maximum-pool-size: 50
        minimum-idle: 50
        max-lifetime: 1800000
        idle-timeout: 30000
      dsa:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:13306/short_link_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: root
        password: ${password}
        maximum-pool-size: 50
        minimum-idle: 50
        max-lifetime: 1800000
        idle-timeout: 30000
    rules:
      sharding:
        tables:
          link_group:
            actual-data-nodes: ds$->{0..1}.link_group
            database-strategy:
              standard:
                sharding-column: account_no
                sharding-algorithm-name: group-inline
          short_link:
            actual-data-nodes: ds$->{0..1}.short_link_0,ds$->{0..1}.short_link_a,dsa.short_link_0,dsa.short_link_a
            database-strategy:
              standard:
                sharding-column: code
                sharding-algorithm-name: link-sharding-database-algorithm
            table-strategy:
              standard:
                sharding-column: code
                sharding-algorithm-name: link-sharding-table-algorithm
        # 默认数据库
        default-database-strategy:
          standard:
            sharding-column: id
            sharding-algorithm-name: default-db-algo
        sharding-algorithms:
          group-inline:
            type: INLINE
            props:
              algorithm-expression: ds$->{account_no % 2}
          link-sharding-database-algorithm:
            type: CLASS_BASED
            props:
              strategy: STANDARD
              algorithmClassName: com.hutu.shortlinklink.strategy.LinkDataBaseShardingAlgorithm
          link-sharding-table-algorithm:
            type: CLASS_BASED
            props:
              strategy: STANDARD
              algorithmClassName: com.hutu.shortlinklink.strategy.LinkTableShardingAlgorithm
          default-db-algo:
            type: INLINE
            props:
              algorithm-expression: ds0  # 所有没有配置的表都默认路由到 ds0
    props:
      sql-show: true


#配置plus打印sql日志
#mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
rocketmq:
  # 多个nameserver用分号隔开
  name-server: localhost:9876
  #生产者
  producer:
    # 发送同一类消息的设置为同一个group，保证唯一
    group: springboot_producer_group
    # 发送消息超时时间，默认3000
    sendMessageTimeout: 10000
    # 发送消息失败重试次数，默认2
    retryTimesWhenSendFailed: 2
    # 异步消息重试此处，默认2
    retryTimesWhenSendAsyncFailed: 2
    # 消息最大长度，默认1024 * 1024 * 4(默认4M)
    maxMessageSize: 4096
    # 压缩消息阈值，默认4k(1024 * 4)
    compressMessageBodyThreshold: 4096
    # 是否在内部发送失败时重试另一个broker，默认false
    retryNextServer: false
  consumer:
    group: springboot_consumer_group
    # 批量拉取消息大小
    pull-batch-size: 10

# minio 配置
minio:
  bucket-name: ${bucket_name}
  url: ${minio_url}
  access-key: ${minio_access_key}
  secret-key: ${minio_secret_key}
